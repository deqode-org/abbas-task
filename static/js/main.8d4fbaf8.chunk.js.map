{"version":3,"sources":["api/index.js","components/SearchBox/index.js","utils.js","app/App.js","reportWebVitals.js","index.js"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","getSuggestions","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","KEYBOARD_KEYS","SearchBox","props","onOptionClick","e","stopPropagation","changeValue","currentTarget","innerText","setState","activeOption","showOptions","searchInput","current","focus","onKeyDown","state","keyCode","suggestions","preventDefault","length","tokens","value","split","join","generateSuggestionList","then","catch","console","error","onInputChange","event","target","getSuggestionsFromServer","React","createRef","func","delay","debounceTimer","context","this","args","arguments","clearTimeout","apply","debounce","className","autoFocus","type","placeholder","onChange","ref","map","optionName","index","onClick","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d4fbaf8.chunk.js","sourcesContent":["// Provided for API Mocks\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from 'react';\nimport getSuggestions from '../../api';\nimport { debounce } from '../../utils';\nimport './SearchBox.css';\n\nconst KEYBOARD_KEYS = {\n  ENTER: 13,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n};\n\nclass SearchBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: [], // to store list of suggestions\n      activeOption: 0, // to set css of selected option\n      showOptions: false,\n    };\n\n    // ref object created to ring focus back on input field for continous typing\n    this.searchInput = React.createRef();\n\n    // Debouncing feature\n    this.getSuggestionsFromServer = debounce(this.generateSuggestionList, 500);\n  }\n\n  // click function to control mouse based selections\n  onOptionClick = (e) => {\n    e.stopPropagation();\n    this.changeValue(`${e.currentTarget.innerText} `);\n    this.setState({ activeOption: 0, showOptions: false });\n    this.searchInput.current.focus();\n  };\n\n  // keydown function to control arrow key based selections\n  onKeyDown = (e) => {\n    if(this.state.showOptions) {\n      switch(e.keyCode) {\n        case KEYBOARD_KEYS.ENTER: {\n          this.setState({ activeOption: 0, showOptions: false });\n          this.changeValue(this.state.suggestions[this.state.activeOption] + ' ');\n          return;\n        }\n        case KEYBOARD_KEYS.UP_ARROW: {\n          e.preventDefault();\n          if (this.state.activeOption === 0) {\n            return;\n          }\n          this.setState({ activeOption: this.state.activeOption - 1 });\n          return;\n        }\n        case KEYBOARD_KEYS.DOWN_ARROW: {\n          e.preventDefault();\n          if (this.state.activeOption === this.state.suggestions.length - 1) {\n            return;\n          }\n          this.setState({ activeOption: this.state.activeOption + 1 });\n          return;\n        }\n        default:\n          return;\n      }\n    }\n  };\n\n  // function to change last word of search text on suggestion selection\n  changeValue = (text) => {\n    const tokens = this.state.value.split(' ');\n    tokens[tokens.length - 1] = text;\n    this.setState({ value: tokens.join(' ') });\n  };\n\n  generateSuggestionList = (text) => {\n    const tokens = text.split(' ');\n    if (tokens[tokens.length - 1] !== '') {\n      getSuggestions(tokens[tokens.length - 1])\n        .then((e) => this.setState({ suggestions: e, showOptions: true }))\n        .catch(console.error);\n    }\n  };\n\n  onInputChange = (event) => {\n    this.setState({ value: event.target.value, showOptions: false });\n    this.getSuggestionsFromServer(event.target.value)\n  }\n\n  render() {\n    const { value, showOptions, suggestions } = this.state;\n\n    return (\n      <div className=\"searchBoxContainer\">\n        <input\n          autoFocus\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"form-control\"\n          value={value}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onInputChange}\n          ref={this.searchInput}\n        />\n        <ul className=\"options\">\n          {showOptions && suggestions && suggestions.map((optionName, index) => (\n            <li \n              key={optionName}\n              className={index === this.state.activeOption ? 'optionActive listElement' : 'listElement'}\n              onClick={this.onOptionClick}\n            >\n              {optionName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","export const debounce = (func, delay) => { \n  let debounceTimer;\n  return function () { \n    const context = this;\n    const args = arguments; \n    \n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(() => func.apply(context, args), delay);\n  } \n};","import './App.css';\nimport SearchBox from '../components/SearchBox';\n\nconst App = () => (\n  <div className=\"appContainer\">\n    <div className=\"searchContainer\">\n      <SearchBox />\n    </div>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Api/index.js","Components/SearchBox/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","KEYBOARD_KEYS","SearchBox","props","onOptionClick","e","stopPropagation","changeValue","currentTarget","innerText","setState","activeOption","showOptions","searchInput","current","focus","onKeyDown","keyCode","state","suggestions","preventDefault","length","tokens","value","split","join","generateSuggestionList","then","catch","console","error","onInputChange","event","target","getSuggestionsFromServer","React","createRef","debounce","this","className","autoFocus","type","placeholder","onChange","ref","onOutsideClick","map","optionName","index","key","onClick","Component","Dashboard","Paths","Redirect","Routes","basename","process","path","component","from","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.83ecfae2.chunk.js","sourcesContent":["// Provided for API Mocks\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport OnOutsiceClick from \"react-outclick\";\nimport { debounce } from \"lodash\";\nimport getSuggestions from \"../../Api\";\nimport \"./SearchBox.css\";\n\nconst KEYBOARD_KEYS = {\n  ENTER: 13,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n};\n\nclass SearchBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: [], // to store list of suggestions\n      activeOption: 0, // to set css of selected option\n      showOptions: false,\n    };\n\n    // ref object created to ring focus back on input field for continous typing\n    this.searchInput = React.createRef();\n\n    // Debouncing feature\n    this.getSuggestionsFromServer = debounce(this.generateSuggestionList, 100);\n  }\n  \n  // click function to control mouse based selections\n  onOptionClick = (e) => {\n    e.stopPropagation();\n    this.changeValue(`${e.currentTarget.innerText} `);\n    this.setState({ activeOption: 0, showOptions: false });\n    this.searchInput.current.focus();\n  };\n\n  // keydown function to control arrow key based selections\n  onKeyDown = (e) => {\n    switch(e.keyCode) {\n      case KEYBOARD_KEYS.ENTER: {\n        this.setState({ activeOption: 0, showOptions: false });\n        this.changeValue(this.state.suggestions[this.state.activeOption] + \" \");\n        return;\n      }\n      case KEYBOARD_KEYS.UP_ARROW: {\n        e.preventDefault();\n        if (this.state.activeOption === 0) {\n          return;\n        }\n        this.setState({ activeOption: this.state.activeOption - 1 });\n        return;\n      }\n      case KEYBOARD_KEYS.DOWN_ARROW: {\n        e.preventDefault();\n        if (this.state.activeOption === this.state.suggestions.length - 1) {\n          return;\n        }\n        this.setState({ activeOption: this.state.activeOption + 1 });\n        return;\n      }\n    }\n  };\n\n  // function to change last word of search text on suggestion selection\n  changeValue = (text) => {\n    const tokens = this.state.value.split(\" \");\n    tokens[tokens.length - 1] = text;\n    this.setState({ value: tokens.join(\" \") });\n  };\n\n  generateSuggestionList = (text) => {\n    const tokens = text.split(\" \");\n    if (tokens[tokens.length - 1] !== \"\") {\n      getSuggestions(tokens[tokens.length - 1])\n        .then((e) => this.setState({ suggestions: e, showOptions: true }))\n        .catch(console.error);\n    }\n  };\n\n  onInputChange = (event) => {\n    this.setState({ value: event.target.value, showOptions: false });\n    this.getSuggestionsFromServer(event.target.value)\n  }\n\n  render() {\n    const { value, showOptions, suggestions } = this.state;\n\n    return (\n      <div className=\"row\" >\n        <div className=\"companyWrapper\" > \n          <input\n            autoFocus\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"form-control\"\n            value={value}\n            onKeyDown={this.onKeyDown}\n            onChange={this.onInputChange}\n            ref={this.searchInput}\n          />\n          <OnOutsiceClick onOutsideClick={() => this.setState({ showOptions: false})}>\n            <ul className=\"options\">\n              {showOptions && suggestions && suggestions.map((optionName, index) => (\n                <li \n                  key={optionName}\n                  className={index === this.state.activeOption ? \"option-active\" : \"\"}\n                  onClick={this.onOptionClick}\n                >\n                  {optionName}\n                </li>\n              ))}\n            </ul>\n          </OnOutsiceClick>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React from \"react\";\nimport SearchBox from \"../../Components/SearchBox\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      ABC Company\n      <SearchBox />\n    </header>\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}